(:durative-action assemble_A
:parameters (?a - itemA ?b - itemB ?c - itemC)
:control (?unit - number)
:duration (= ?duration 2)
:condition (and (at start (>= ?unit 0)) (at start (<= ?unit 10))
 (at start (>= (stock ?b) (* ?unit 2))) (at start (>= (stock ?c) ?unit)) 
 (at end (>= (stock ?b) 0 )) (at end (>= (stock ?c) 0 )))
:effect (and (at end (increase (stock ?a) ?unit))
 (at start (decrease (stock ?c) ?unit))
 (at start (decrease (stock ?b) (* ?unit 2)))))

(:durative-action assemble_B
:parameters (?b-itemB ?e-itemE ?f-itemF ?d-itemD)
:control (?unit - number)
:duration (= ?duration 1)
:condition (and (at start (>= ?unit 0)) (at start (<= ?unit 10))
 (at start (>= (stock ?e) (* ?unit 3)))
 (at start (>= (stock ?f) (* ?unit 1)))
 (at start (>= (stock ?d) (* ?unit 2)))
 (at end (>= (stock ?f) 0 )) (at end (>= (stock ?e) 0 ))
 (at end (>= (stock ?d) 0 )))
:effect (and (at end (increase (stock ?b) ?unit))
 (at start (decrease (stock ?e) (* ?unit 3)))
 (at start (decrease (stock ?f) (* ?unit 1)))
 (at start (decrease (stock ?d) (* ?unit 2)))))
 
(:durative-action assemble_C
:parameters (?c - itemC ?g - itemG)
:control (?unit - number)
:duration (= ?duration 1)
:condition (and (at start (>= ?unit 0)) (at start (<= ?unit 10))
 (at start (>= (stock ?g) (* ?unit 2))) (at end (>= (stock ?g) 0 )))
:effect (and (at end (increase (stock ?c) ?unit))  
 (at start (decrease (stock ?g) (* ?unit 2)))))
 
(:durative-action assemble_D
:parameters (?d - itemC ?h - itemH ?i - itemI)
:control (?unit - number)
:duration (= ?duration 1)
:condition (and (at start (>= ?unit 0)) (at start (<= ?unit 10))
 (at start (>= (stock ?h) (* ?unit 5)))
 (at start (>= (stock ?i) (* ?unit 2)))
 (at end (>= (stock ?h) 0 )) (at end (>= (stock ?i) 0 )))
:effect (and (at end (increase (stock ?d) ?unit))  
 (at start (decrease (stock ?h) (* ?unit 5)))
 (at start (decrease (stock ?i) (* ?unit 2)))))
 
(:durative-action supply_raw_material
:parameters (?d - item)
:control (?unit - number)
:duration (= ?duration 1)
:condition (and (at start (>= ?unit 0)) (at start (<= ?unit 10))
 (at start (>= (stock ?d) 0)) (at start (can_supply ?d)))
:effect (and (at end (increase (stock ?d) ?unit))))